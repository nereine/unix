#!/usr/bin/env bash
# up is a simple cross-platform shell script for package/system upgrade
# up is used together with the separate up.tables
# up.tables file is used to store the command tables for ease of adding/removing command 
# In addition to up.tables, up also requires extra shell scripts to work
# The up.tables and script files are available from https://gitlab.com/artnoi-staple/unix

## Exit if $OS variable is not available from .bash_profile
[ -z "$OS" ]\
&& printf 'up: could not get OS information from .bash_profile\n'\
&& exit 1;

## Sourcing external files using source.sh
# Because we use 'command -v', sourcing will fail if the files are not in $PATH
[[ "$fts_status" != 'ok' ]]\
&& . "$(command -v 'source.sh')"\
&& . "$(command -v 'up.tables')";

## up_queue() - queue the commands from the table into indexed array 'cmd'. It extracts commands from retrieved up.tables strings containing $delimeters. For now, only ';' is supported.
up_queue() {
	delimeters=(';');
	# If $cmd contains one of these $deli character, expand $cmd into $newcmd, and then copy $newcmd to $cmd (overwrite)

	for deli in "${delimeters[@]}";
	do
		# At this point, array $cmd only has one element cmd[0]
		case "${cmd[0]}" in
			# If cmd[0] matches any of $delimeters pattern
			# or just *';'* for now
			*"$deli"*)
				# Use IFS=';' to separate commands
				# And read them into array $newcmd
				IFS="$deli" read -ra newcmd <<< "${cmd[0]}";
				# Copy $newcmd to $cmd
				cmd=("${newcmd[@]}"); ;;
		esac;
	done;
}

up_exec_loop() {

	# Generate normal array of commands to be run ${cmd[]}
	# as well as its description ${cmddesc[]}
	typeset -a cmd;
	typeset -a cmddesc;
	
	# up_arg() gets commands from up.tables
	# It looks at the tables matching command-line argument
	up_arg "$1";
	
	# Prompt user to queue if containing delimeter ';'
	[[ "$cmd" == *";"* ]]\
	&& simyn "Commands for ${cmddesc}:\n${cmd}\n\nEnter Yes to queue cmd, or No to run all cmd at once?"\
	&& up_queue;
	
	# Run commands from indexed arrays 'cmd'
	# If up_queue was used, then this array has >1 number of element
	for commands in "${cmd[@]}";
	do
		## Prompt user before using sh -c to run $c
		printf "up - %s\n" "$cmddesc"
		simyn "Run ${commands}?"\
		&& sh -c "$commands"\
		&& line;
		
		printf 'Exit status = %i for %s\n' "$?" "$commands";
		line;

	done;
	
	# upafter() is defined in unix/sh-tools/bin/up.tables
	upafter;
}

main() {
	# Only run with argument
	if [ -n "$1" ]; then
	# Get command list
		up_exec_loop "$1";
	else
		up_exec_loop 'help';
	fi;
}

main "$1";
