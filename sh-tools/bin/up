#!/usr/bin/env bash
# up is a simple cross-platform shell script for package/system upgrade
# up is used together with the separate up.tables
# up.tables file is used to store the command tables for ease of adding/removing command 
# In addition to up.tables, up also requires extra shell scripts to work
# The up.tables and script files are available from https://gitlab.com/artnoi-staple/unix

## Exit if $OS variable is not available from .bash_profile
[ -z "$OS" ]\
&& printf 'up: could not get OS information from .bash_profile\n'\
&& exit 1;

## Sourcing external files using source.sh
# Because we use 'command -v', sourcing will fail if the files are not in $PATH
[[ "$fts_status" != 'ok' ]]\
&& . "$(command -v 'source.sh')"\
&& . "$(command -v 'up.tables')";

# up_prompt() prompts user for confirmation.
# up_prompt() uses variables $c ($cmd) and $d ($cmddesc) used in the 'for' loop below
up_prompt() {
	# Show command description
	printf "up: %s\n" "$1";
	# Simple Yes/No prompt - return 1 if no
 	simyn "Run command: $2"\
	|| return 1;
}

## up_queue() - queue the commands from the table into indexed array 'cmd'. It extracts commands from retrieved up.tables string with 'delimeters'
up_queue() {
	delimeters=(';' '&&' '||');
	# If $cmd contains one of these $deli character, expand $cmd into $newcmd, and then copy $newcmd to $cmd (overwrite)

	for deli in "${delimeters[@]}";
	do
		case "${cmd[0]}" in
			*';'*|*'&&'*)
				IFS="$deli" read -ra newcmd <<< "${cmd[0]}";
				unset cmd;
				# Copy $newcmd to $cmd
				cmd=("${newcmd[@]}"); ;;
		esac;
	done;
}

up_exec_loop() {
# up_cmd() will generate normal array of commands to be run ${cmd[]}
# as well as its description ${cmddesc[]}
	typeset -a cmd;
	typeset -a cmddesc;
	
	# up_arg() gets commands from up.tables based on argument (user input), then up_queue() queues the commands for execution
	up_arg "$1";
	up_queue;
	
	# After successful command retrieval from the tables, run commands from indexed arrays 'cmd'
	for c in "${cmd[@]}"; do
		for d in "${cmddesc[@]}"; do
			## Prompt user before running commands sourced from up.tables
			up_prompt "$d" "$c"\
			&& $SHELL -c "$c";
			
			## Report description as done. Description will be highlighted by lines made out of "="
			line; printf '%s: done\n' "$d"; line;
		done;
	done;
	
	# upafter() is defined in unix/sh-tools/bin/up.tables
	upafter;
}

main() {
	# Only run with argument
	if [ -n "$1" ]; then
	# Get command list
		up_exec_loop "$1";
	else
		up_exec_loop 'help';
	fi;
}

main "$1";
